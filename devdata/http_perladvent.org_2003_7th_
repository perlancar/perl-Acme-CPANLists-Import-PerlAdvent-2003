<html>

<!-- page copyright Mark Fowler 2002-2004 -->
<!-- all rights reserved -->

<head>
 <title>Perl 2003 Advent Calendar: Attribute::Handlers</title>
</head>
<style>



.box {
  background-color: white;
  border-width: 2px; border-color: black; border-style: solid;
  padding: 0.25em;
  margin-top: 1em; margin-bottom: 1em;
  margin-left: 2em; margin-right: 2em;
}

.camelimage {
  border-width: 3px; border-color: black; border-style: solid;
  width : 556;
}

body 	{ font:       Verdana, Geneva, Arial, Helvetica, sans-serif
          color:      black;
	}

.doc         {  font: 90%       Verdana, Geneva, Arial, Helvetica, sans-serif; }
.mylink      {  font: 90%       Verdana, Geneva, Arial, Helvetica, sans-serif; text-align: center; }

.copyright   {  font: 60%       Verdana, Geneva, Arial, Helvetica, sans-serif; text-align: center; }
.onthe       {  font: 60%       Verdana, Geneva, Arial, Helvetica, sans-serif; text-align: center; }
.externalnav {  font: 60%       Verdana, Geneva, Arial, Helvetica, sans-serif; text-align: center; }
.internalnav {  font: 60%       Verdana, Geneva, Arial, Helvetica, sans-serif; }
.disablednav {  font: 60%       Verdana, Geneva, Arial, Helvetica, sans-serif; color: #aaaaaa }


.hugeheading {  font: bold 250% Verdana, Geneva, Arial, Helvetica, sans-serif; text-align: center; }
.bigheading  {  font: bold 180% Verdana, Geneva, Arial, Helvetica, sans-serif; text-align: center; }
.modtitle    {  font: bold 130% Verdana, Geneva, Arial, Helvetica, sans-serif; text-align: center; }

}

dt,dd     { font:      90%  Verdana, Geneva, Arial, Helvetica, sans-serif }
pre  	  { font:     100%  Monaco, ProFont, Courier, monospace; }

a         { text-decoration: underline; }

a:link	  { color: #1e2d39; }
a:visited { color: #1e2d39; }
\
a:hover   {
  color: red; 
  text-decoration: underline;
}

a:active  { color: red; }

img { display: block; }


</style>
<body bgcolor="#ff7f00">


<div class="bigheading">The 2003 Perl Advent Calendar</div>
<div class="externalnav"><a href="/about">[about]</a> | <a href="/news">[news]</a> | <a href="/rss">[rss]</a> | <a href="/mirrors">[mirrors]</a> | <a href="http://www.perl.org/">[links]</a><br /><a href="/2000">[2000]</a> | <a href="/2001">[2001]</a> | <a href="/2002">[2002]</a> | <a href="/2003">[2003]</a> | <a href="/2004">[2004]</a></div>
<br />


<div class="box">
<div class="onthe">
On the 7th day of Advent my True Language brought to me..
</div>
<div class="modtitle">Attribute::Handlers</div>

<!-- ooh look, a table.  Someone *please* tell me how to do this with css -->
<!-- also, i.e. totally doesn't dtr if I say width="100%" here -->
<center>
<table width="300"  cellpadding="0" cellspacing="0">
<tr>

<td width="33%">

<div align="left" class="internalnav"><a href="/2003/6th/">[previous]</a></div>
</td>


<td width="33%">
<div align="center" class="internalnav">
<a href="/2003/">[calendar]</a>
</div>
</td>

<td width="33%">

<div align="right" class="internalnav"><a href="/2003/8th/">[next]</a></div>

</td>

</tr>
</table>
</center>

</div>




<div class="box">
<div class="doc"><p>Attributes are a method of attaching out of band information onto
variables or functions in modern perls.  This is very useful for
storing metadata - data about the data or code you are creating.</p>
<p>They can be used for a variety of tasks, and if used properly can be
used to add extra functionality or constraints to your code without
overly complicating the code layout.</p>
<p>Attribute::Handlers allows you to write your own attributes in
Perl that your scripts can use.</p>
</div>
<div class="mylink"><a href="http://search.cpan.org/perldoc?Attribute::Handlers">[Read the documentation for Attribute::Handlers on search.cpan.org]</a></div>
</div>



<div class="box">
<div class="doc"><p>Using (as opposed to writing) attributes is simple.  For example, the
<b>Attribute::TieClasses</b> module allows us an alternative interface to
tie.</p>
<pre>  #!/usr/bin/perl</pre>

<pre>  # turn on the safety features
  use strict;
  use warnings;</pre>

<pre>  # load the module that defines our attributes
  use Attribute::TieClasses;</pre>

<pre>  # create a variable and stick the magical 'Toggle' attribute on it
  my $foo : Toggle;</pre>

<pre>  # print out $foo four times.
  for (1..4)
  {
    if ($foo)
     { print "it's true!\n" }
    else
     { print "it's false!\n" }
  }</pre>

<p>The <code>Toggle</code> note tells Perl that the variable should be tied with
the <code>Tie::Toggle</code> class, meaning every time it's read it alternates
between being true and false.  Hence, when we run this code we get:</p>
<pre>  it's false!
  it's true!
  it's false!
  it's true!</pre>

<p>Attributes can also be attached to subroutines.  For example, the
<b>Attribute::Attempts</b> module allows you to put a little note on a
subroutine that says that it an exception is thrown within that
routine Perl should simply wait a bit and run the subroutine again.</p>
<pre>  # alter db will try three times before failing
  sub alter_db : attempts(tries =&gt; 3, delay =&gt; 2)
  {
    # connect to the database or throw an exception
    my $dbh = DBI-&gt;connect("DBD::Mysql:foo", "mark", "opensaysme")
      or die "Can't connect to database";</pre>

<pre>    # tell the dbi to throw an exception if there's a problem
    local $dbh-&gt;{RaiseException} = 1;</pre>

<pre>    # try doing some sql
    $dbh-&gt;do("alter table items change pie pies int(10)");
  }</pre>

<p>Note how the <code>attempts</code> attribute itself takes arguments (in
this case the number attempts Perl should make to run the subroutine
before giving up, and the seconds it should wait between attempts.)
As with all attributes these <i>must</i> be all on the same line as the
<code>sub</code> declaration itself.</p>
<h2>Writing your own attributes</h2>
<p><b>Attribute::Handlers</b> works by defining a new attribute <code>ATTR</code> that
itself can be used to create new attributes by applying it to
approperately named subroutines.</p>
<p>For example, we can write a module that defines a <code>Monitored</code> attribute
that when applied to a variable indicates that the contents of the
variable should be monitored and printed out whenever the <code>report</code>
method is called.</p>
<p>We do this by defining a class with a <code>Monitored</code> subroutine in it
and marking <i>this</i> subroutine with the <code>ATTR</code> attribute.</p>
<pre>  package Attribute::Monitored;</pre>

<pre>  # turn on perl's safety features
  use strict;
  use warnings;</pre>

<pre>  # setup the ATTR attribute
  use Attribute::Handlers;</pre>

<pre>  use Data::Dumper;</pre>

<pre>  # our list of variables that we're monitoring
  our @monitoring;</pre>

<pre>  # declare an attribute 'Monitored' that can be attached to scalars
  sub Monitored : ATTR(SCALAR)
  {
    my ($package, $symbol, $referent, $attr, $data, $phase) = @_;</pre>

<pre>    # referent contains a reference to the variable that the attribute
    # was written next to.  We simply record it.
    push @monitoring, $referent;
  }</pre>

<pre>  sub report
  {
    # go through each of the variables that we're storing.
    foreach my $var (@monitoring)
    {
      # print out the variable
      print Dumper ${ $var };
    }
  }</pre>

<pre>  # return true to keep Perl happy
  1;</pre>

<p>This attribute is now accessible to any class that inherits from our
class.
 
  package Fred;
  use base qw(Attribute::Monitored);</p>
<pre>  # declare a variable and make it monitored
  my $foo : Monitored = "bar";</pre>

<pre>  # a subroutine to alter $foo
  sub foo { $foo = shift }</pre>

<pre>  1;</pre>

<p>We can now get reports like so:</p>
<pre>  use Fred;
  Fred-&gt;report;
  Fred-&gt;foo("baz");
  Fred-&gt;report;</pre>

<p>Which prints out:</p>
<pre>  $VAR1 = 'bar';
  $VAR1 = 'Fred';</pre>

<h2>Moving on further.</h2>
<p>Though I've written quite a few attribute handlers, the code tends to
be hard to follow and quite verbose - neither of which make ideal
content for the advent calendar, even if the module deserves a
mention. </p>
<p>The complexity comes from the wealth of information you're passed in each
of your attribute subroutines each time the attribute is applied.</p>
<ul>
<li><a name="item__package"></a><b>$package</b>
<p>The name of the package the item the attribute is being applied to is
located in.</p>
</li>
<li><a name="item__symbol"></a><b>$symbol</b>
<p>The typeglob that contains the item, if there is one.  For example,
the typeglob can be used to replace a subroutine that an attribute is
applied to with a wrapping subroutine (this is in fact how
<b>Attribute::Attempts</b> functions.  This value might be a constant
"LEXICAL" or "ANON" instead of a typeglob if the item isn't being
entered in the stash.</p>
</li>
<li><a name="item__referent"></a><b>$referent</b>
<p>A reference to the variable that the attribute is being applied.</p>
</li>
<li><a name="item__attr"></a><b>$attr</b>
<p>The name of the attribute that's being applied.</p>
</li>
<li><a name="item__data"></a><b>$data</b>
<p>The arguments that were passed in the data.  For example, in the code
above we passed 'tries =&gt; 3, delay =&gt; 2' to the attempts subroutine
and that would be found in this variable.  <b>Attribute::Handlers</b> will
attempt to turn these values into a Perl data structure, but failing
this this will be just passed in as a string.</p>
</li>
<li><a name="item__phase"></a><b>$phase</b>
<p>Where exactly the attribute is being executed in the lifetime of
the program (at <code>BEGIN</code> time, <code>CHECK</code> time, etc)</p>
</li>
</ul>
<p>With all these options you should hopefully get an idea of what
exactly is possible.  With a reference to a variable you can tie the
underlying variable to do 'interesting things'  With a reference to
a symbol table you can modify subroutines by wrapping them in external
subroutines.</p>
</div>
</div>




<div class="box">
<div class="doc"><p><li><a href="http://search.cpan.org/dist/Attribute-TieClasses/TieClasses.pm">Attribute::TieClasses</a></li>
<li><a href="http://search.cpan.org/dist/Tie-Toggle/Toggle.pm">Tie::Toggle</a></li>
<li><a href="http://search.cpan.org/dist/Attempt/lib/Attribute/Attempts.pm">Attribute::Attempts</a></li></p>
</div>
</div>




 




<!-- Created 2004-12-21T18:29:55 -->

<br/>

<div class="copyright">
Copyright 2000-2004 Mark Fowler, all rights reserved.<br/>
This documentation may be distributed under the <a href="http://www.opensource.org/licenses/academic.php">Academic Free License</a><br/>
Comments/Complaints/Suggestions re this site: <a href="http://2shortplanks.com/contact/">webmaster</a>
</div>

</body>
</html>