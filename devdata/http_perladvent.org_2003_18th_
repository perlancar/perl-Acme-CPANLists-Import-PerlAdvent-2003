<html>

<!-- page copyright Mark Fowler 2002-2004 -->
<!-- all rights reserved -->

<head>
 <title>Perl 2003 Advent Calendar: PDF::Reuse</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body bgcolor="#ff7f00">


<div class="bigheading">The 2003 Perl Advent Calendar</div>
<div class="externalnav"><a href="../../FAQ-2shortplanks.html">[about]</a> | <a href="../../archives.html">[archives]</a> | <a href="../../contact.html">[contact]</a> | <a href="../../">[home]</a></div>
<br />


<div class="box">
<div class="onthe">
On the 18th day of Advent my True Language brought to me..
</div>
<div class="modtitle">PDF::Reuse</div>

<!-- ooh look, a table.  Someone *please* tell me how to do this with css -->
<!-- also, i.e. totally doesn't dtr if I say width="100%" here -->
<center>
<table width="300"  cellpadding="0" cellspacing="0">
<tr>

<td width="33%">

<div align="left" class="internalnav"><a href="../17th/">[previous]</a></div>
</td>


<td width="33%">
<div align="center" class="internalnav">
<a href="../">[calendar]</a>
</div>
</td>

<td width="33%">

<div align="right" class="internalnav"><a href="../19th/">[next]</a></div>

</td>

</tr>
</table>
</center>

</div>




<div class="box">
<div class="doc"><p>PDF::Reuse allows you to add PDF content to existing PDF files.  It's
got some thin wrappers around the text writing routines and image
handing routines, and expects you to do pretty much everything else
that can be done by hand, allowing you to write native PDF code (don't
let anyone tell you I didn't warn just how low level it is.)</p>
<p>There are several advantages to PDF::Reuse.  Firstly, it produces
efficently sized PDF files because it, as the name implies, it reuses
data.  And because of this reuse, and the fact that it's really really
low level, it's quite nippy - orders of magnatude more so than some
other PDF tools I'd care to mention - meaning it can easily create
batches of thousands of documents while lesser PDF tools.</p>
<p>Oh, and finally it's free, as in speech and as beer.  PDFLib (a much
more fully featured module that has Perl bindings) costs a small
fortune if you licence it commercially.</p>
</div>
<div class="mylink"><a href="http://search.cpan.org/perldoc?PDF::Reuse">[Read the documentation for PDF::Reuse on search.cpan.org]</a></div>
</div>



<div class="box">
<div class="doc"><p>It's Christmas time again.  You'd have thought I'd have noticed, what
with the whole advent calendar thing and all, but as usual I've left
my Christmas shopping to the last minute.  No, later than that, almost
the minute after that.  So this year I've decided to get everyone
virtual gifts that don't actually physically exist.</p>
<p>It'd still be nice to hand people a physical something though, so I
came up with the idea of creating a little printout, a certificate
of my gift.  With my left side of my brain switched on, I fired up
my Snazzy Mac Editing Package and create my work of art.  Clipart.
Bad fonts.  The Lot.  And then I save it as a PDF file.</p>
<p>And now I just need to put everyone's name, and what they've got
on the certificate.  How do I do that?  Let's look at a basic
example of the script.</p>
<pre>  #!/usr/bin/perl</pre>

<pre>  # turn on perl's safety features
  use strict;
  use warnings;</pre>

<pre>  # load the module
  use PDF::Reuse;</pre>

<pre>  # create the output file
  prFile("output.pdf");</pre>

<pre>  # insert the orignal file
  prForm("xmas.pdf");</pre>

<pre>  # write some extra text
  prText(100,100, "Hello World");
  
  # close the file (mandatory)
  prEnd();</pre>

<p>The coordinates are based in postscript points, and are measured
from the bottom left hand corner.  This means that the bottom left
corner is at (0,0), and the top right is at (595.27, 841,89), as I'm
using A4 which is 210mm x 297mm, and there are 2.83 milimeters to
each postscipt point.</p>
<h2>Formatting</h2>
<p><b>PDF::Reuse</b> has a vast array of functions that can be used to
manipulate the output that you're creating.  Based on the fact
that PDF is a vector format it's able to do some quite amazing
things - inserting scaled documents within documents, ripping
images out of one document and placing that image in the
current document, inserting javascript to script things like
Acrobat, and more.  I highly recommend reading the excellent
<li><a href="http://search.cpan.org/dist/PDF-Reuse-Tutorial/Tutorial.pm">tutorial</a></li></p>
<p>For now we'll concern outselves with the things that worry us the most
- inserting fonts, and altering their size, face, and colour.</p>
<ul>
<li><a name="item_Standard_Fonts"></a><b>Standard Fonts</b>
<p>Any of the standard PDF fonts are avalible to you.   These are</p>
<ul>
<li><a name="item_Times_Roman__TR_"></a><b>Times-Roman (TR)</b>
</li>
<li><a name="item_Times_Bold__TB_"></a><b>Times-Bold (TB)</b>
</li>
<li><a name="item_Times_Italic__TI_"></a><b>Times-Italic (TI)</b>
</li>
<li><a name="item_Times_BoldItalic__TBI_"></a><b>Times-BoldItalic (TBI)</b>
</li>
<li><a name="item_Courier__C_"></a><b>Courier (C)</b>
</li>
<li><a name="item_Courier_Bold__CB_"></a><b>Courier-Bold (CB)</b>
</li>
<li><a name="item_Courier_Oblique__CO_"></a><b>Courier-Oblique (CO)</b>
</li>
<li><a name="item_Courier_BoldOblique__CBO_"></a><b>Courier-BoldOblique (CBO)</b>
</li>
<li><a name="item_Helvetica__H_"></a><b>Helvetica (H)</b>
</li>
<li><a name="item_Helvetica_Bold__HB_"></a><b>Helvetica-Bold (HB)</b>
</li>
<li><a name="item_Helvetica_Oblique__HO_"></a><b>Helvetica-Oblique (HO)</b>
</li>
<li><a name="item_Helvetica_BoldOblique__HBO_"></a><b>Helvetica-BoldOblique (HBO)</b>
</li>
</ul>
<p>They can be invoked by simply using their name </p>
<pre>  prFont("TimesRoman");
  prText(100,100,"Yes Ossifer, it was like that when I found it.");</pre>

<p>Or by using any of the handy abriviation codes</p>
<pre>  prFont("TR");
  prText(100,100,"Yes Ossifer, it was like that when I found it.");</pre>

</li>
<li><a name="item_Non_Standard_Fonts"></a><b>Non-Standard Fonts</b>
<p>You can use any font that is included in any of the documents that
you've included by using the exact name that was used in that
document.  Which would be great news, it's let down by the fact that
to save space most PDF creation software don't include the graphics
for letters that arn't used in the orginal document, meaning you won't
be able to use those letters in your document either.  Oh, darn.</p>
<p>You can see what fonts, and what letters from those fonts, are present
in a document by using the <code>reuseComponent_pl</code> script that's in the
<b>PDF::Reuse</b> distribution.  It spits out a rather natty PDF 
that shows all that info.</p>
</li>
<li><a name="item_Font_Sizes"></a><b>Font Sizes</b>
<p>The size of the font, that is to say, the height of your font, is
easy to set.  Like everything else releated to the module it's defined
in points:</p>
<pre>  prFontSize(24);
  prText(100,100,"CTRL-ALT-DELETE is my friend");</pre>

<p>One of the most annoying this about using fonts with <b>PDF::Reuse</b> is
that it has no facility for telling you how wide a row of text will be
or for word-wrapping your text.  If you need to print blocks of text
you can either try a lot of trial and error, or you can use the one
untasteful solution that I've found: Fixed width fonts.</p>
<p>Fixed width fonts are the same width for every charect.  That means
that unlike our proportioanlly spaced fonts that we're now used to,
the skinny letter 'i' takes up the same width as the fat letter 'm'.
It also means that each letter has a fixed width ratio to the height.
For the built in font Courier, this ratio is 0.6 - the font is
slightly less than two thirds the width that it is tall.</p>
<pre>  print "the string 'hello' is " . courier_width("hello",10) .
        "points wides when printed in 10pt courier\n";</pre>

<pre>  sub courier_width
  {
    my $text = shift;
    my $pnts = shift;
    return length($text)*($pnts*0.6);
  }</pre>

<p>This means we can now do things like print centred text:</p>
<pre>  prFontSize(10);
  my $string = "This is a LOW TEA warning.  Act NOW!";
  prText((595.27 - courier_width($string,10))/2,100,$string);</pre>

</li>
<li><a name="item_Colours"></a><b>Colours</b>
<p>One of the most dramatic shocks to find out about <b>PDF::Reuse</b> is
that it provides absolutly no way to chage the colour of the thing
you're drawing into your PDF.  The only way to do this is to output
the correct PDF code by hand.  Fortuantly that's not too difficult:</p>
<pre>    prAdd("1.0 1.0 1.0 rg");   # white</pre>

<p>We use the <code>prAdd</code> command that outputs directly to the PDF stream.
The three digits are the amount of red, green and blue that are in
the colour.  By varying the amount, it's possible to get any colour
your computer can display.  For example, having all red and no
other colour makes red:</p>
<pre>     prAdd("1.0 0.0 0.0 rg");   # red</pre>

<p>Whereas full red, full green and no blue makes yellow.</p>
<pre>     prAdd("1.0 1.0 0.0 rg");   # yellow</pre>

</li>
</ul>
<h2>Multiple Pages</h2>
<p>So, for my list I want to create a single document that has all the
pages for all the gifts in it, as this way I don't have to have a
large collection of files about.  The single document will also be a lot
more efficent because each file will require one copy of the original
<code>xmas.pdf</code> file in it - and if we have one file per page, then that's
going to be a lot of copies of that orginal data we won't have to keep
around.</p>
<pre>  #!/usr/bin/perl</pre>

<pre>  # turn on perl's safety features
  use strict;
  use warnings;</pre>

<pre>  # load the module
  use PDF::Reuse;</pre>

<pre>  # define constants for the size of things
  use constant WIDTH     =&gt; 595.27;
  use constant HEIGHT    =&gt; 841,89;
  use constant FONT_SIZE =&gt; 14;
 
  # read the people and gifts from STDIN and/or the file
  # passed on command line
  my %people = map { split /!/, $_ } (&lt;&gt;);</pre>

<pre>  use Data::Dumper;
  print Dumper \%people;</pre>

<pre>  # create the *one* output file
  prFile("output.pdf");</pre>

<pre>  # turn on compression (make it small)
  prCompress(1);</pre>

<pre>  # courier 10pt (this stays in effect for all pages)
  prFont("C");
  prFontSize(FONT_SIZE);</pre>

<pre>  # for each of the files
  foreach my $name (keys %people)
  {
    # insert the orignal file (this only includes the
    # data the first time it is called, and subsequent
    # calls just add the same data to each page)
    prForm("xmas.pdf");</pre>

<pre>    # red!
    prAdd("1.0 0.0 0.0 rg");</pre>

<pre>    # write their name centred
    prText((WIDTH-courier_width($name,FONT_SIZE))/2,
           305,
           $name);</pre>

<pre>    # write their gift centred below that
    prText((WIDTH-courier_width($people{$name},FONT_SIZE))/2,
           248,
           $people{$name});</pre>

<pre>    # next page
    prPage()
  }</pre>

<pre>  # close the file (mandatory)
  prEnd();</pre>

<pre>  #########</pre>

<pre>  sub courier_width
  {
    my $text = shift;
    my $pnts = shift;
    return length($text)*($pnts*0.6);
  }</pre>

</div>
</div>




<div class="box">
<div class="doc"><p><li><a href="http://search.cpan.org/dist/PDF-Reuse-Tutorial/Tutorial.pm">The PDF::Reuse tutorial</a></li>
<li><a href="http://search.cpan.org/dist/PDF-API2/lib/PDF/API2.pm">PDF::API2 - Another PDF manipulation lib</a></li>
<li><a href="http://search.cpan.org/dist/PDFLib/PDFLib.pm">PDFLib - very handy commercial PDF manipulation lib</a></li></p>
</div>
</div>




 




<!-- Created 2004-12-21T18:29:56 -->

<br/>

<div class="copyright">
Copyright 2000-2004 Mark Fowler, all rights reserved.<br/>
This documentation may be distributed under the <a href="http://www.opensource.org/licenses/academic.php">Academic Free License</a><br/>
Comments/Complaints/Suggestions re this site: <a href="../../contact.html">webmaster</a>
</div>

</body>
</html>