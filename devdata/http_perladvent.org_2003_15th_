<html>

<!-- page copyright Mark Fowler 2002-2004 -->
<!-- all rights reserved -->

<head>
 <title>Perl 2003 Advent Calendar: Text::Glob</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body bgcolor="#ff7f00">


<div class="bigheading">The 2003 Perl Advent Calendar</div>
<div class="externalnav"><a href="../../FAQ-2shortplanks.html">[about]</a> | <a href="../../archives.html">[archives]</a> | <a href="../../contact.html">[contact]</a> | <a href="../../">[home]</a></div>
<br />


<div class="box">
<div class="onthe">
On the 15th day of Advent my True Language brought to me..
</div>
<div class="modtitle">Text::Glob</div>

<!-- ooh look, a table.  Someone *please* tell me how to do this with css -->
<!-- also, i.e. totally doesn't dtr if I say width="100%" here -->
<center>
<table width="300"  cellpadding="0" cellspacing="0">
<tr>

<td width="33%">

<div align="left" class="internalnav"><a href="../14th/">[previous]</a></div>
</td>


<td width="33%">
<div align="center" class="internalnav">
<a href="../">[calendar]</a>
</div>
</td>

<td width="33%">

<div align="right" class="internalnav"><a href="../16th/">[next]</a></div>

</td>

</tr>
</table>
</center>

</div>




<div class="box">
<div class="doc"><p>One of the keys to writing good code is using the right tool
for the job.  The whole reason why Perl regular expressions are so
popular is because they're a completely separate little language within
Perl for doing a distinct job.  In theory, someone could have written
a module with which you could specify a program method call by method
call to build up a regular expression matcher - but writing in a domain
particular language is much easier</p>
<p>The closer to the domain of the problem the easier it is to code programs
in this domain.  Text::Glob is an example of an even more domain specific
language than regular expressions, not only optimised for matching text
buy highly optimised for specifying patterns for matching file names.  It
allows you to directly use the syntax that you're familiar with from 
using the shell directly in your Perl programs.  Sure, you could do this
with a regular expression, but it's much harder to deal with and a lot less
clear for the reader - especially if you deal with the edge cases.</p>
</div>
<div class="mylink"><a href="http://search.cpan.org/perldoc?Text::Glob">[Read the documentation for Text::Glob on search.cpan.org]</a></div>
</div>



<div class="box">
<div class="doc"><p><b>Text::Glob</b> can be made to export two functions, <code>glob_to_regex</code>
and <code>match_glob</code>.  The former of these returns a compiled perl
regular expression that implements the glob pattern, whereas the latter
applies the glob pattern directly to a list.</p>
<pre>  use Text::Glob qw(glob_to_regex);
  my $regex = glob_to_regex("*.pm");
  my @perlfiles = grep /$regex/, @files;</pre>

<pre>  use Test::Glob qw(match_glob);
  my @perlfiles = match_glob("*.pm", @files);</pre>

<p>And that's about it, apart from describing the syntax.</p>
<ul>
<li><a name="item_Wildcards"></a><b>Wildcards</b>
<p>The syntax for wildcards is pretty straight forward compared to normal
regular expressions.  '*' means match zero or more characters and '?' means
any one character.  Therefore the pattern <code>b?b*</code> would match like so:</p>
<pre>   bob     # matches (the 'o' matches ?, and '*' nothing)
   bab     # matches (the 'a' matches ?, and '*' nothing)
   bac     # doen't match (the c isn't a b)
   bobby   # matches (the 'o' matches ?, and '*' 'by')</pre>

<p>There's some additional constraints on these wildcards.  Neither of
the wildcards match the '/' separator</p>
<pre>  bob/foo  # doesn't match as we've 'changed directories'</pre>

<p>Text::Glob also respects the special nature of <i>dot-files</i>.  This
means that if we create a pattern like <code>*_history</code> it won't match
<code>.bash_history</code>.  What it's actually doing is making sure that '?' or
'*' won't match a dot if it's the first character.</p>
</li>
<li><a name="item_Alternatives"></a><b>Alternatives</b>
<p>There's two ways of specifying alternatives.  The first is a simple
list of alternatives separated by commas.   For example:</p>
<pre>  *.{html,htm}  # match all html documents
  *.htm{l,}     # same thing
 
The other way is to provide character classes</pre>

<pre>  index_[a-z][a-z].htm{l,}  # match all different languages</pre>

<p>Obviously, these can be mixed and placed within each other</p>
<pre>  index{_[a-z][a-z],}.{html,htm,xml,txt,cgi}</pre>

</li>
</ul>
<p>So there you have it, another simple but immensely useful module.</p>
</div>
</div>




<div class="box">
<div class="doc"><p><li><a href="http://search.cpan.org/dist/File-Find-Rule/lib/File/Find/Rule.pm">File::Find::Rule uses Text::Glob schemantics</a></li>
<li><a href="http://www.perldoc.com/perl5.8.0/pod/perlre.html">perlre manual page</a></li></p>
</div>
</div>




 




<!-- Created 2004-12-21T18:29:56 -->

<br/>

<div class="copyright">
Copyright 2000-2004 Mark Fowler, all rights reserved.<br/>
This documentation may be distributed under the <a href="http://www.opensource.org/licenses/academic.php">Academic Free License</a><br/>
Comments/Complaints/Suggestions re this site: <a href="../../contact.html">webmaster</a>
</div>

</body>
</html>