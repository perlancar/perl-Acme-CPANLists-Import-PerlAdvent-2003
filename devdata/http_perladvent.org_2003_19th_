<html>

<!-- page copyright Mark Fowler 2002-2004 -->
<!-- all rights reserved -->

<head>
 <title>Perl 2003 Advent Calendar: Acme::Code::FreedomFighter</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body bgcolor="#ff7f00">


<div class="bigheading">The 2003 Perl Advent Calendar</div>
<div class="externalnav"><a href="../../FAQ-2shortplanks.html">[about]</a> | <a href="../../archives.html">[archives]</a> | <a href="../../contact.html">[contact]</a> | <a href="../../">[home]</a></div>
<br />


<div class="box">
<div class="onthe">
On the 19th day of Advent my True Language brought to me..
</div>
<div class="modtitle">Acme::Code::FreedomFighter</div>

<!-- ooh look, a table.  Someone *please* tell me how to do this with css -->
<!-- also, i.e. totally doesn't dtr if I say width="100%" here -->
<center>
<table width="300"  cellpadding="0" cellspacing="0">
<tr>

<td width="33%">

<div align="left" class="internalnav"><a href="../18th/">[previous]</a></div>
</td>


<td width="33%">
<div align="center" class="internalnav">
<a href="../">[calendar]</a>
</div>
</td>

<td width="33%">

<div align="right" class="internalnav"><a href="../20th/">[next]</a></div>

</td>

</tr>
</table>
</center>

</div>




<div class="box">
<div class="doc"><p>Today is for most sensible people the last working day of the year
before Christmas.  It's a time to relax and be merry, so I won't
bother you with the gritty details of any serious module, I'll instead
bring you tales of yore from the depths of the Acme:: namespace.</p>
<p>If you've been paying attention the last few years you'll know that
the Acme:: namespace is the black sheep of the CPAN collective, featuring
modules that don't really have any practical purpose, other than to
show some funky features of the language.</p>
<p>Are we sitting comfortably?  Then I shall begin.</p>
</div>
<div class="mylink"><a href="http://search.cpan.org/perldoc?Acme::Code::FreedomFighter">[Read the documentation for Acme::Code::FreedomFighter on search.cpan.org]</a></div>
</div>



<div class="box">
<div class="doc"><p>A long time ago (in a galaxy, far far away) - or on the 1987 if
<li><a href="http://www.perldoc.com/perl5.8.0/pod/perlhist.html">perlhist</a></li> is to be
believed - Larry released Perl 1.  Sixteen years on and a day we've
got a very different language.</p>
<p>In this time what people want from the language has changed.  For example,
It used to be commonplace to use variables as soon as you wanted without
declaring them first:</p>
<pre>  $number = 42 * 4077 * 1701;
  print $numer;</pre>

<p>Of course, people soon got tired of making typos like the one above and
decided that we should have the <code>strict</code> pragma.  Amongst other things
this enforces that you declare things before you use them.  Like so:</p>
<pre>  my $number = 42 * 4077 * 1701;
  print $numer;   # causes an error</pre>

<p>This explodes with a handy error telling us that <code>$numer</code> hasn't been
predeclare (indeed, if you <code>use diagnostics</code> as we've seen previously
you'll get a full explanation.  This way perl doesn't silently create new
variables whenever you make a typo (and hence produce hard to track down
bugs) but complains right where the error is in your code there and then.</p>
<p>People moaned.  <code>use strict</code> allowed them to check what they were typing
was correct, but also prevented them from abusing many of Perl's more
powerful features.  The argument goes that if you know what you're doing
then you don't need to use strict.  The counter argument goes that you
should know when to turn it off.</p>
<pre>  no strict;</pre>

<p>People claimed it was against the nature of the language to have to
turn these things off.  Other people <i>insisted</i> that you <code>use
strict</code> at the start of the program.  <li><a href="http://jargon.mu.nu/Archives/000999.html">holy wars</a></li> started.  And then
someone would suggest using vi over emacs (or vice versa,) and someone
else would compare someone to Hitler, and to be frank that never
helped the conversation.</p>
<p>And then people would make <li><a href="http://search.cpan.org/dist/Acme-USIG/lib/Acme/USIG.pm">silly modules</a></li> based on mailing list posts
by idiots who claimed in the worst possible way that <code>use strict</code> was
not to be used.  And other people countered with modules that turned
<li><a href="http://search.cpan.org/dist/Acme-use-strict-with-pride/pride.pm">strict on everywhere</a></li>.</p>
<p>In short, it got out of hand.</p>
<h2>Acme::Code::Police</h2>
<p>So eventually, whilst adding to the collection of goofball modules
declared under the <code>Acme::</code> namespace some bright spark came up
with the idea of <li><a href="http://search.cpan.org/dist/Acme-Code-Police/Police.pm">Acme::Code::Police</a></li>.  This module is insane.  It consists of one line only</p>
<pre>  INIT{unless(exists$INC{'strict.pm'}){unlink((caller)[1])}}</pre>

<p>This says, when someone loads the module unless someone has used use
strict (i.e. it's been included in the <code>%INC</code> hash off all loaded
modules) delete the file that contained the code that called us.  Yes,
that's right.  This module deletes your source code!  No recommended
for commercial use!</p>
<p>This makes use of two handy, yet not widely abused, functions of Perl.
First, it looks in the <code>%INC</code> hash.  The <code>%INC</code> hash contains
the full path to all the modules that we've created (in Unix notation,
no matter what platform.)  For example:</p>
<pre>  #!/usr/bin/perl</pre>

<pre>  # turn on perl's safety features
  use strict;
  use warnings;</pre>

<pre>  use Data::Dumper;
  print Dumper \%INC;</pre>

<p>prints out:</p>
<pre> $VAR1 = {
           'warnings/register.pm' =&gt; '/usr/share/perl/5.8.0/warnings/register.pm',
           'bytes.pm' =&gt; '/usr/share/perl/5.8.0/bytes.pm',
           'XSLoader.pm' =&gt; '/usr/lib/perl/5.8.0/XSLoader.pm',
           'Carp.pm' =&gt; '/usr/share/perl/5.8.0/Carp.pm',
           'Exporter.pm' =&gt; '/usr/share/perl/5.8.0/Exporter.pm',
           'strict.pm' =&gt; '/usr/share/perl/5.8.0/strict.pm',
           'warnings.pm' =&gt; '/usr/share/perl/5.8.0/warnings.pm',
           'overload.pm' =&gt; '/usr/share/perl/5.8.0/overload.pm',
           'Data/Dumper.pm' =&gt; '/usr/lib/perl/5.8.0/Data/Dumper.pm'
         };</pre>

<p>The <b>Acme::Code::Police</b> module uses this hash to determine if you've
loaded strict at any point in your code or not.</p>
<p>The other feature that <b>Acme::Code::Police</b> uses is the <code>caller</code>
function.  This can be used to find out various details about the
code that called the current routine.  For example:</p>
<pre>  #!/usr/bin/perl</pre>

<pre>  # turn on perl's safety features
  use strict;
  use warnings;</pre>

<pre>  sub foo
  { 
     bar();
  }</pre>

<pre>  sub bar
  {
    print join ',', caller;
  }</pre>

<pre>  foo();</pre>

<p>This prints out:</p>
<pre>  main, myscript.pl, 7</pre>

<p>Which is the package, filepath, and linenumber of what called <code>bar</code>.
<b>Acme::Code::Police</b> uses this to work out the path to the file that
called <b>Acme::Code::Police</b> without calling <code>use strict</code> first and
deleted it.</p>
<h2>Acme::Code::FreedomFighter</h2>
<p><b>Acme::Code::FreedomFighter</b> is a module that's designed to combat
the nasty effects of <b>Acme::Code::Police</b>.  Looking at the source
of this module would make it immediately obvious how this functions,
except for the fact that the author has used <li><a href="http://search.cpan.org/dist/Acme-EyeDrops/lib/Acme/EyeDrops.pm">Acme::Eyedrops</a></li> to
convert the <li><a href="http://search.cpan.org/src/GMCCAR/Acme-Code-FreedomFighter-3.1416/FreedomFighter.pm">source code</a></li> into a picture of Che Guevara.  Go
figure.</p>
<p>Instead you'll have to guess what the source does, but I can tell you
the effect.  If you load it before Acme::Code::Police from your code
then it's not the code that calls Acme::Code::Police that's getting
deleted...but I'm not saying what else will</p>
</div>
</div>




<div class="box">
<div class="doc"><p><li><a href="http://www.perl.com/pub/a/2001/10/31/lighter.html">The lighter side of Perl article on perl.com</a></li></p>
</div>
</div>




 




<!-- Created 2004-12-21T18:29:56 -->

<br/>

<div class="copyright">
Copyright 2000-2004 Mark Fowler, all rights reserved.<br/>
This documentation may be distributed under the <a href="http://www.opensource.org/licenses/academic.php">Academic Free License</a><br/>
Comments/Complaints/Suggestions re this site: <a href="../../contact.html">webmaster</a>
</div>

</body>
</html>